"""
This security layer inadequately handles A/B storage for files in RepyV2.



Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py

    """
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # make the files and add 'SE' to the readat file... [when create = True]
    if create and self.Afn not in listfiles():  #If (new ^ empty) -> spawn
      self.Afile = openfile(self.Afn,create)
      self.Bfile = openfile(self.Bfn,create)
      self.Afile.writeat('SE',0)
    else:                                       #If existing file, then B gets A's contents
      self.Bfile = openfile(self.Bfn,False)
      self.Afile = openfile(self.Afn,False)
      self.writeAonB()

  def writeat(self,data,offset):
    # Write the requested data to the B file using the sandbox's writeat call
        self.Bfile.writeat(data,offset)

  def readat(self,bytes,offset):
    # Read from the A file using the sandbox's readat...
    try:
        return self.Afile.readat(bytes,offset)
    except:
        return ""

  def close(self):              #If (closed ^ valid) -> A get B
        if(self.isValid()):
          self.writeBonA()

        self.Bfile.close()
        self.Afile.close()

  def isValid(self):
    contentsA = self.Afile.readat(None,0)
    contentsB = self.Bfile.readat(None,0)
    if(len(contentsA) > 0 and len(contentsB) > 0 ):
        firstLastA = contentsA[0] + contentsA[-1]
        firstLastB = contentsB[0] + contentsB[-1]
        if(firstLastA == "SE" and firstLastA == firstLastB):
          return True
        else:
          return False
    else:
        return False

  def writeAonB(self):
        contents = self.Afile.readat(None,0)
        self.Bfile.close()
        removefile(self.Bfn)
        self.Bfile = openfile(self.Bfn,True)
        self.Bfile.writeat(contents,0)

  def writeBonA(self):
        contents = self.Bfile.readat(None,0)
        self.Afile.close()
        removefile(self.Afn)
        self.Afile = openfile(self.Afn,True)
        self.Afile.writeat(contents,0)

  def printContents(self):          #only for testing
    contentsA = self.Afile.readat(None,0)
    contentsB = self.Bfile.readat(None,0)

def ABopenfile(filename, create):
  return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()